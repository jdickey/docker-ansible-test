---
# Reinitialize a Droplet, set up Docker, and get our app running in it
#
# Ensure that:
# 1. An SSH key is present (see `digital_ocean` module docs);
# 2. A named Droplet exists, waiting for it to be running;
# 3. The regular user exists;
# 4. The users `authorized_keys` file exists with correct contents;
# 5. The `/etc/ssh/sshd_config` file has the correct contents;
# 6. The SSH daemon is reloaded;
# 7. The `apt` package cache is updated/upgraded;
# 8. The `ufw` firewall is configured correctly;
# 9. Docker is installed and available to the regular user;
# 10. The desired Docker image has been pulled;
# 11. The desired Docker image has been started;
# 12. Content is available from the Web server hosted by the named Droplet;
# 13. The desired Floating IP already exists;
# 14. The desired Floating IP is reassigned to the named Droplet;
# 15. Content is available from the Web server addressed by the Floating IP.

- name: Get a Docker image up and running on a new Droplet
  hosts: demo2
  remote_user: '{{ droplet_user_name }}'
  # become: yes
  vars_files:
    - secret
  vars:
    floating_ip: '139.59.220.189'
    target_droplet: 56364157
    target_host: demo2
  roles:
    - common

  tasks:
    - name: pull Docker image
      shell: docker pull jdickey/grid-demo:dev4
      # docker_image:
      #   name: jdickey/grid-demo:dev4

    - name: ensure Docker container is running
      docker_container:
        state: started
        interactive: yes
        tty: yes
        auto_remove: yes
        exposed_ports: "80"
        published_ports: "80:80"
        memory: 64m
        detach: yes
        env:
          REACT_APP_GIT_HASH_FULL: 652828fa5d0b9d09c91a4f2f19d12f259887b17f
          REACT_APP_GIT_HASH_SHORT: 652828f
          REACT_APP_IMAGE_TAG: "grid-demo:dev4"
        image: "jdickey/grid-demo:dev4"
        name: "automated_insanity"

    - name: get Droplet IP address
      shell: /snap/bin/doctl compute droplet list demo2 -t {{ do_token }} --no-header --format 'PublicIPv4'
      changed_when: false
      register: droplet_ip

    - name: ensure content is available from the Droplet IP directly
      uri:
        url: "http://{{ droplet_ip.stdout }}/"
        return_content: yes
      register: droplet_page

    - name: ensure Floating IP is assigned to target droplet
      digital_ocean_floating_ip:
        ip: '{{ floating_ip }}'
        droplet_id: '{{ target_droplet }}'
        oauth_token: '{{ do_token }}'

    - name: ensure content is available from the Floating IP host
      uri:
        url: "http://{{ floating_ip }}/"
        return_content: yes
      register: floating_page
    - debug: var=floating_page.etag

    - name: verify Floating IP produces same content as Droplet IP
      assert:
        that:
          - "floating_page.etag == droplet_page.etag"
