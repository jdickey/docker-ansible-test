---
# Reinitialize a Droplet, set up Docker, and get our app running in it
#
# Ensure that:
# 1. A named Droplet exists, and is running (from localhost);
# 2. The regular user exists (on the remote);
# 3. The user's `authorized_keys` file exists with correct contents (on the remote);
# 4. The `/etc/ssh/sshd_config` file has the correct contents (on the remote);
# 5. The SSH daemon is reloaded *if* the configuration was changed (on the remote);
# 6. The `apt` package cache is updated/upgraded (on the remote);
# 7. The `ufw` firewall is configured correctly (on the remote);
# 8. The desired Docker image has been pulled if not already on the remote;
# 9. The desired Docker image has been started (on the remote);
# 10. Content is available from the Web server hosted by the named Droplet;
#
# THINGS TO BE FIXED:
# 11. The desired Floating IP already exists;
# 12. The desired Floating IP is reassigned to the named Droplet;
# 13. Content is available from the Web server addressed by the Floating IP.

- name: Get a Docker image up and running on a new Droplet
  hosts: in_process
  remote_user: '{{ droplet_user_name }}'
  vars_files:
    - secret
  # vars: # Look, ma; no vars! Almost certainly a FIXME (roles?)

  tasks:
    # We're presently using a DigitalOcean app image for Docker. Should this
    # no longer be the case, this is where you would ensure that Docker is in
    # fact installed.

    - name: Ensure pip is upgraded
      pip:
        name: pip
        state: latest
    - name: Install docker-py via pip
      pip:
        name: docker-py
        state: present

    # FIXME: Don't hardcode image name! Use an extra var instead
    - name: pull Docker image
      docker_image:
        state: present
        name: jdickey/grid-demo:dev4

    # FIXME: Don't hardcode environment variables; those should be extras too
    - name: ensure Docker container is running
      docker_container:
        state: started
        # interactive: yes
        # tty: yes
        # auto_remove: yes
        detach: yes
        exposed_ports: "80"
        memory: 64m
        published_ports: "80:80"
        env:
          REACT_APP_GIT_HASH_FULL: 652828fa5d0b9d09c91a4f2f19d12f259887b17f
          REACT_APP_GIT_HASH_SHORT: 652828f
          REACT_APP_IMAGE_TAG: "grid-demo:dev4"
          DOCKER_HUB_USER: jdickey
        image: "jdickey/grid-demo:dev4"
        name: "automated_insanity"

    - name: get Droplet IP address
      shell: ifconfig eth0 | grep 'inet addr' | awk '{printf("%s\n", $2); }' | cut -f 2 -d ':'
      changed_when: false
      register: droplet_ip
    - name: debugging
      debug: var=droplet_ip

    - name: ensure content is available from the Droplet IP directly
      uri:
        url: "http://{{ droplet_ip.stdout }}/"
        return_content: yes
      register: droplet_page

    - debug: msg="droplet_page.etag is {{ droplet_page.etag }}"

    # - name: ensure Floating IP is assigned to target droplet
    #   digital_ocean_floating_ip:
    #     ip: '{{ floating_ip }}'
    #     droplet_id: '{{ do_id }}'
    #     oauth_token: '{{ do_token }}'

    # - name: ensure content is available from the Floating IP host
    #   uri:
    #     url: "http://{{ floating_ip }}/"
    #     return_content: yes
    #   register: floating_page
    # - debug: var=floating_page.etag

    # - name: verify Floating IP produces same content as Droplet IP
    #   assert:
    #     that:
    #       - "floating_page.etag == droplet_page.etag"
